class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        if(grid.size()==1)
            return 0;
        
        int left=grid[0][0];
        int right=grid.size()*grid.size();
        
        while(left<=right)
        {
            cout<<left<<" "<<right<<endl;
            int mid=left+(right-left)/2;
            
            bool res=helper(grid,mid);
            if(res)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        
        return left;
    }
    
    bool helper(vector<vector<int>>& grid, int target)
    {
        queue<pair<int,int>> q;
        set<pair<int,int>> s;
        s.insert({0,0});
        q.push({0,0});
        
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            
            if(x-1>=0 && grid[x-1][y]<=target && s.find({x-1,y})==s.end())
            {
                q.push({x-1,y});
                s.insert({x-1,y});
            }
            if(x+1<grid.size() && grid[x+1][y]<=target && s.find({x+1,y})==s.end())
            {
                q.push({x+1,y});
                s.insert({x+1,y});
                
                if(x+1==grid.size()-1 && y==grid.size()-1)
                    return true;
            }
            if(y-1>=0 && grid[x][y-1]<=target && s.find({x,y-1})==s.end())
            {
                q.push({x,y-1});
                s.insert({x,y-1});
            }
            if(y+1<grid.size() && grid[x][y+1]<=target && s.find({x,y+1})==s.end())
            {
                q.push({x,y+1});
                s.insert({x,y+1});
                if(y+1==grid.size()-1 && x==grid.size()-1)
                    return true;
            }
        }
        
        return false;
    }
};
